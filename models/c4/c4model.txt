/*
 * Farmacy Family System View
*/
workspace "Farmacy Family System" "Farmacy Family System View." {

    model {
        customer = person "Farmacy Family Customer" "An engaged customer of the Farmacy system, where they can get collaboration opportunities." "Customer"
        farmacyFoodCustomer = person "Farmacy Food Customer" "Customer that places transition to buy meals." "Transactional Customer"
        medicalProvider = person "Medical provider" "Medical providers like Nurses/Doctors" "Medical Provider for Clinics"
        dietician = person "Dietician" "Dieticians that recommedns dietry needs/changes for Farmacy Family Customer" "Dietitianist"            

        enterprise "Farmacy Family System" {

            farmacyFoodSystem = softwaresystem "Farmacy Foods System" "Existing farmacy Foods system that provides meals/foods for their customers, make sure right food is available near to customers fridges etc., etc." "Existing System"
            notificationSystem = softwaresystem "Notification System" "Notification capability allows different types of notificatios to be sent out like Email, SMS, Push etc." "Existing System"
            eDietitionSystem = softwaresystem "eDietition System" "System that allows expert dietitionist to recommend different type of foods based on customer needs." "Existing System"
            medicalSystem = softwaresystem "Medical System" "System that allows medical providers to work with engaged customers to do testing, run analutics and make recommendsations." "Existing System"
            cmsSystem = softwaresystem "CMS System" "Content Management System that allows different types of engagement models (wellness programs, forums etc.) for engaged customer." "CMS System"
            analyticsSystem = softwaresystem "Analytics System" "Analytics System gather engaged customer test results from medical provider system, rely on the customer profile and perform analysis based out of ML model to recommend changes in the type of food for customers." "Farmacy Data Lake" {
                    dataSources = container "Data Sources" "Source systems publish Domian events." "Data Sources"
                    evetnBus = container "Event Bus" "Event Bus responsible to capture all events." "Data Sources"
                    dataIngestion = container "Data Ingestion" "Raw data ingested for further processing." "Data Ingestion"
                    dataLakeStore = container "Data Lake Store" "Data Lake Store Schema" "Data Lake Store"
                    mlTrainer = container "Machine Learning Training" "" "Machine Learning Training"
                    mlModelStore = container "Machine Learning Model Store" "" "Machine Learning Model Storage"
                    analyticProcessor = container "Analytics Processor" "Analytics Processor using ML Models" "Analytics Processor"
            }

            farmacyFamilySystem = softwaresystem "Farmacy Family System" "Allows engaged customers to collaborate, learn about wellness of their health and access medical providers as well as dieticiantist to provide overall good food recommendations." {
                singlePageApplication = container "Single-Page Application" "Provides all of the Farmacy Family functionality & hooks to 3rd party systems to engaged customers via their web browser." "JavaScript and React" "Web Browser"
                mobileApp = container "Mobile App" "Provides a limited subset of the Farmacy Family functionality to its engaged customers via their mobile device." "React Native" "Mobile App"
                webApplication = container "Web Application" "Delivers the static content and the Farmacy Family single page application." "Spring Boot MVC"
                apiApplication = container "API Application" "Provides Farmacy Family functionality via a HTTPS protocol (supports JSON communication style only)." "Spring Boot MVC" {
                    signinController = component "Sign In Controller" "Allows users to sign in to the Farmacy Family System." "Spring Boot MVC Rest Controller"
                    communityEngagementController = component "Community Engagement Controller" "Provides customers with a list of options to engagege with farmacy family community." "Spring MVC Rest Controller"
                    medicalProviderController = component "Medical provider Controller" "Medical Provider Engagement using medical System Integration (eDietition, Medical Provider)" "Spring MVC Rest Controller"
                    communityEngagementService = component "Community Engagement Service Facade" "Facade to provides integration with the CMS System" "Spring Bean"
                    medicalProviderService = component "Medical Provider System Integration Service Facade" "Facade to provides integration with the medical System" "Spring Bean"
                    securityComponent = component "Security Component" "Provides functionality related to signing in, changing passwords, etc." "Spring Bean"
                    emailComponent = component "E-mail Component" "Sends e-mails to users." "Spring Bean"
                }
                database = container "Database" "Stores user registration information, user prefrences, access logs, etc." "Postgress Database Schema" "Database"
            }
            
        }

        # relationships between people and software systems
        customer -> farmacyFamilySystem "Access Clinics/eDietician platforms, collaborate with other users and access wellness programs"
        farmacyFamilySystem -> farmacyFoodSystem "Access Transactional Customer Data"
        farmacyFoodSystem -> farmacyFamilySystem "Access Engaged Customer Data"
        farmacyFamilySystem -> notificationSystem "Sends Notifications"
        notificationSystem -> customer "Sends Notifications to"
        notificationSystem -> farmacyFoodCustomer "Sends Notifications to"
        farmacyFoodCustomer -> farmacyFoodSystem "Purchase Meals etc."
        farmacyFamilySystem -> eDietitionSystem "Engaged Customers access dietition system and engage with their dietitionists"
        dietician -> eDietitionSystem "Gives dietry recommendation based on customer medical needs."
        dietician -> farmacyFamilySystem "Access customer profile to use it for dietry recommendation."
        medicalProvider -> medicalSystem "Access Customer Medical record"
        customer -> medicalProvider "get Access to Medical System for appointment, testing etc."
        farmacyFamilySystem -> cmsSystem "Integrastes for different engagement models (Wellness Programs, Seminars, Forums etc.)."
        analyticsSystem -> medicalSystem "Gather Engaged Customer test results"
        farmacyFamilySystem -> analyticsSystem "Get Engaged Customers recommendations based out of analytics"
        
        # relationships for Data Lake Platform
        dataSources -> evetnBus "Data Sources capture domain events and publish to Event Bus"
        evetnBus -> dataIngestion "Event Bus ingest raw data"
        dataIngestion -> dataLakeStore "Raw data (structured & unstructured) gets stored in the data lake store"
        mlTrainer -> dataLakeStore "Machine Learning gets data periodically, learn from it and generates model"
        mlTrainer -> mlModelStore "ML models gets stored in the ML Storage"
        analyticProcessor -> mlModelStore "Analytucs Processor gets input from request and generates analytics using ML models"
        
         # relationships for farmacyFamilySystem Container
        customer -> webApplication "Visits farmacyfamily.com using" "HTTPS"
        customer -> singlePageApplication "Uses it to engage with Farmacy Family Platform (community & medical advise engagements)"
        customer -> mobileApp "Able to Engage with Medical Providers and with teh Community"
        dietician -> mobileApp "Dietician Access to the Famacy Family System"
        dietician -> webApplication "Dietician Access to the Famacy Family System"
        dietician -> singlePageApplication "Dietician Access to the Famacy Family System"
        webApplication -> singlePageApplication "Delivers to the customer's web browser"
        mobileApp -> apiApplication "Delivers to the customer's web browser"
        singlePageApplication -> apiApplication "Delivers to the customer's web browser"
        apiApplication -> database "Reads from and writes to" "JDBC"
         
        # relationships to/from farmacyFamilySystem components
        singlePageApplication -> signinController "Makes API calls to" "JSON/HTTPS"
        singlePageApplication -> communityEngagementController "Makes API calls to" "JSON/HTTPS"
        singlePageApplication -> medicalProviderController "Makes API calls to" "JSON/HTTPS"
        mobileApp -> signinController "Makes API calls to" "JSON/HTTPS"
        mobileApp -> communityEngagementController "Makes API calls to" "JSON/HTTPS"
        mobileApp -> medicalProviderController "Makes API calls to" "JSON/HTTPS"
        signinController -> securityComponent "Uses"
        communityEngagementController -> communityEngagementService "Uses"
        communityEngagementService -> cmsSystem  "Makes API calls to" "XML/HTTPS"
        medicalProviderController -> medicalProviderService "Uses"
        medicalProviderService -> medicalSystem  "Makes API calls to" "XML/HTTPS"
        securityComponent -> database "Reads from and writes to" "JDBC"
        communityEngagementService -> emailComponent "Sends e-mail using"        
        medicalProviderService -> emailComponent "Sends e-mail using" 
        emailComponent -> notificationSystem "Different type of notifications platform supports eMail/Push/SMS/InApp"

        #Deployment
        deploymentEnvironment "Production" {
            deploymentNode "Customer's mobile device" "" "Apple iOS or Android" {
                liveMobileAppInstance = containerInstance mobileApp
            }
            deploymentNode "Customer's computer" "" "Microsoft Windows or Apple macOS" {
                deploymentNode "Web Browser" "" "Chrome, Firefox, Safari, or Edge" {
                    liveSinglePageApplicationInstance = containerInstance singlePageApplication
                }
            }

            deploymentNode "Farmacy Family System" "" "Farmacy Family System data center" {
                deploymentNode "farmacyFamily-web***" "" "Ubuntu 16.04 LTS" "" 4 {
                    deploymentNode "Spring Boot Embedded App Server" "" "Apache Tomcat 8.x" {
                        liveWebApplicationInstance = containerInstance webApplication
                    }
                }
                deploymentNode "farmacyFamily-api***" "" "Ubuntu 16.04 LTS" "" 8 {
                    deploymentNode "Spring Boot Embedded App Server" "" "Apache Tomcat 8.x" {
                        liveApiApplicationInstance = containerInstance apiApplication
                    }
                }

                deploymentNode "farmacyFamily-db01" "" "Ubuntu 16.04 LTS" {
                    primaryDatabaseServer = deploymentNode "Posgres - Primary" "" "AWS RDS - Postgres 12.8" {
                        livePrimaryDatabaseInstance = containerInstance database
                    }
                }
                deploymentNode "farmacyFamily-db02" "" "Ubuntu 16.04 LTS" "Failover" {
                    secondaryDatabaseServer = deploymentNode "Posgres - Secondary" "" "AWS RDS - Postgres 12.8" "Failover" {
                        liveSecondaryDatabaseInstance = containerInstance database "Failover"
                    }
                }
                deploymentNode "farmacyFamily-cms-system-prod001" "" "" "" {
                    softwareSystemInstance cmsSystem
                }
                deploymentNode "farmacyFamily-medical-system-prod001" "" "" "" {
                    softwareSystemInstance medicalSystem
                }                
            }

            primaryDatabaseServer -> secondaryDatabaseServer "Replicates data to"
        }
        
    }

    views {
        systemlandscape "SystemLandscape" {
            include *
            autoLayout
        }

        systemcontext farmacyFamilySystem "SystemContext" {
            include *
            animation {
                farmacyFamilySystem
            }
            autoLayout
        }
        
        container analyticsSystem "ASContainers" {
            include *
            animation {
                dataSources
                evetnBus
            }
            autoLayout
        }        

        container farmacyFamilySystem "FFContainers" {
            include *
            animation {
                customer
                webApplication
                singlePageApplication
                mobileApp
                apiApplication
                database
            }
            autoLayout
        }
        
        component apiApplication "Components" {
            include *
            animation {
                singlePageApplication mobileApp database notificationSystem medicalSystem cmsSystem
                signinController securityComponent
                communityEngagementController communityEngagementService
                 medicalProviderController medicalProviderService            
            }
            autoLayout
        }


        deployment farmacyFamilySystem "Production" "ProdDeployment" {
            include *
            animation {
                liveSinglePageApplicationInstance
                liveMobileAppInstance
                liveWebApplicationInstance liveApiApplicationInstance
                livePrimaryDatabaseInstance
                liveSecondaryDatabaseInstance
            }
            autoLayout
        }

        styles {
            element "Person" {
                color #ffffff
                fontSize 22
                shape Person
            }
            element "Customer" {
                background #08427b
            }
            element "Transactional Customer" {
                background #568760
            }
            element "Medical Provider for Clinics" {
                background #568760
            }
            element "Dietitianist" {
                background #568760
            }            
            element "Software System" {
                background #1168bd
                color #ffffff
            }
            element "Existing System" {
                background #768479
                color #ffffff
            }
            element "CMS System" {
                background #768479
                color #ffffff
            }
            element "Container" {
                background #438dd5
                color #ffffff
            }
            element "Web Browser" {
                shape WebBrowser
            }
            element "Mobile App" {
                shape MobileDeviceLandscape
            }
            element "Database" {
                shape Cylinder
            }
            element "Component" {
                background #85bbf0
                color #000000
            }
            element "Failover" {
                opacity 25
            }
        }
    }
}